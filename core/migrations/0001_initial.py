# Generated by Django 3.2.7 on 2023-01-15 11:15

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=150)),
                ('phone_no', models.CharField(max_length=20)),
                ('package', models.CharField(choices=[('user', 'user'), ('agent', 'agent')], default='user', max_length=20)),
                ('wallet_balance', models.FloatField(default='0')),
                ('referal_bonus', models.FloatField(default='0')),
                ('total_referal', models.IntegerField(default='0')),
                ('account_number', models.CharField(default='0', max_length=15)),
                ('account_name', models.CharField(default='user', max_length=200)),
                ('bank_name', models.CharField(default='bank', max_length=50)),
                ('account_ref', models.CharField(default='ref', max_length=100)),
                ('pin', models.CharField(blank=True, max_length=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AirtimeNetwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('network_id', models.CharField(max_length=50)),
                ('is_available', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CardPinNetwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('is_available', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='DataNetwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('network_id', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Decoder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('provider_id', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Disco',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('type', models.CharField(choices=[('PREPAID', 'PREPAID'), ('POSTPAID', 'POSTPAID')], default='PREPAID', max_length=100)),
                ('disco_id', models.CharField(max_length=20)),
                ('user_convinience_fee', models.FloatField()),
                ('agent_convinience_fee', models.FloatField()),
                ('is_active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='EPin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('end_user_price', models.IntegerField()),
                ('smart_earner_price', models.IntegerField()),
                ('top_user_price', models.IntegerField()),
                ('is_available', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ManualBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='bank', max_length=50, unique=True)),
                ('bank_name', models.CharField(max_length=50)),
                ('acc_no', models.CharField(max_length=20)),
                ('acc_name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='message', max_length=100, unique=True)),
                ('message', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Monify',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=100)),
                ('amount', models.IntegerField()),
                ('reference', models.CharField(max_length=500)),
                ('status', models.CharField(choices=[('success', 'success'), ('pending', 'pending'), ('failed', 'failed')], default='pending', max_length=40)),
                ('date_ordered', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MonifyRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='rate', max_length=100, unique=True)),
                ('rate', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Paystack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(default='user', max_length=400)),
                ('amount', models.IntegerField()),
                ('reference', models.CharField(max_length=500)),
                ('status', models.CharField(choices=[('success', 'success'), ('pending', 'pending'), ('failed', 'failed'), ('initiated', 'initiated')], default='initiated', max_length=40)),
                ('date_ordered', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PaystackCharge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='charge', max_length=20, unique=True)),
                ('rate', models.IntegerField(default=2)),
            ],
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referrer', models.CharField(max_length=100)),
                ('referred', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ReferralBonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bonus', models.CharField(default='ref_bonus', max_length=100, unique=True)),
                ('per_transaction', models.IntegerField()),
                ('per_upgrade', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=100)),
                ('service', models.CharField(max_length=100)),
                ('plan', models.CharField(blank=True, max_length=200, null=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('amount_paid', models.FloatField(blank=True, null=True)),
                ('date_ordered', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('success', 'success'), ('pending', 'pending'), ('initiated', 'initiated'), ('failed', 'failed'), ('reversed', 'reversed')], default='initiated', max_length=40)),
                ('reference', models.CharField(blank=True, max_length=500, null=True)),
                ('message', models.CharField(blank=True, max_length=500, null=True)),
                ('beneficiary', models.CharField(blank=True, max_length=200, null=True)),
                ('beneficiary_name', models.CharField(blank=True, max_length=200, null=True)),
                ('type', models.CharField(choices=[('debit', 'debit'), ('credit', 'credit')], default='debit', max_length=100)),
                ('notify', models.BooleanField(default=False)),
                ('route', models.CharField(blank=True, max_length=200, null=True)),
                ('bal_before', models.FloatField(blank=True, null=True)),
                ('bal_after', models.FloatField(blank=True, null=True)),
                ('topic', models.CharField(default='Payment Recieved', max_length=200)),
                ('convinience_fee', models.FloatField(blank=True, null=True)),
                ('token', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UpgradePrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='price', max_length=30, unique=True)),
                ('agent', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='WalletAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=200)),
                ('action', models.CharField(choices=[('CREDIT', 'CREDIT'), ('DEBIT', 'DEBIT')], max_length=100)),
                ('amount', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='LoggedInUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=200, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='logged_in_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DataPlanType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('CORPORATE GIFTING', 'CORPORATE GIFTING'), ('GIFTING', 'GIFTING'), ('SME', 'SME')], default='SME', max_length=200)),
                ('is_available', models.BooleanField(default=False)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.datanetwork')),
            ],
        ),
        migrations.CreateModel(
            name='DataPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('plan_id', models.CharField(max_length=100)),
                ('user_price', models.FloatField()),
                ('agent_price', models.FloatField()),
                ('is_active', models.BooleanField(default=False)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.datanetwork')),
                ('plan_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.dataplantype')),
            ],
        ),
        migrations.CreateModel(
            name='CardPin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_price', models.CharField(max_length=200)),
                ('end_user_discount', models.IntegerField()),
                ('smart_earner_discount', models.IntegerField()),
                ('top_user_discount', models.IntegerField()),
                ('is_available', models.BooleanField(default=False)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.cardpinnetwork')),
            ],
        ),
        migrations.CreateModel(
            name='CablePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('plan_id', models.CharField(max_length=100)),
                ('user_price', models.FloatField()),
                ('agent_price', models.FloatField()),
                ('is_active', models.BooleanField(default=False)),
                ('decoder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.decoder')),
            ],
        ),
        migrations.CreateModel(
            name='Airtime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('types', models.CharField(choices=[('VTU', 'VTU'), ('SNS', 'SNS')], default='VTU', max_length=100)),
                ('plan_id', models.CharField(blank=True, max_length=100, null=True)),
                ('user_rate', models.FloatField(default=100)),
                ('agent_rate', models.FloatField(default=100)),
                ('is_available', models.BooleanField(default=False)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.airtimenetwork')),
            ],
        ),
    ]
